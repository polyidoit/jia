(function($) {
    "use strict";

    var Typed = function(element, options) {
        this.el = $(element);
        this.options = $.extend({}, $.fn.typed.defaults, options);
        this.isInput = this.el.is("input");
        this.attr = this.options.attr;
        this.showCursor = this.isInput ? false : this.options.showCursor;
        this.elContent = this.attr ? this.el.attr(this.attr) : this.el.text();
        this.contentType = this.options.contentType;
        this.typeSpeed = this.options.typeSpeed;
        this.startDelay = this.options.startDelay;
        this.backSpeed = this.options.backSpeed;
        this.backDelay = this.options.backDelay;
        this.strings = this.options.strings;
        this.strPos = 0;
        this.arrayPos = 0;
        this.stopNum = 0;
        this.loop = this.options.loop;
        this.loopCount = this.options.loopCount;
        this.curLoop = 0;
        this.stop = false;
        this.cursorChar = this.options.cursorChar;
        this.build();
    };

    Typed.prototype = {
        constructor: Typed,

        build: function() {
            if (this.showCursor === true) {
                this.cursor = $('<span class="typed-cursor">' + this.cursorChar + '</span>');
                this.el.after(this.cursor);
            }
            this.init();
        },

        init: function() {
            var self = this;
            setTimeout(function() {
                self.typewrite(self.strings[self.arrayPos], self.strPos);
            }, self.startDelay);
        },

        typewrite: function(str, pos) {
            var self = this;
            if (self.stop === true) return;
            var humanize = Math.round(Math.random() * (100 - 30)) + self.typeSpeed;
            if (self.contentType === 'html') {
                var curString = str.substr(0, pos);
                if (curString.charAt(curString.length - 1) === '^') {
                    var next = 1;
                    while (str.substr(pos + next).charAt(0) !== '^') {
                        next++;
                    }
                    next++;
                }
            }
            setTimeout(function() {
                if (pos === str.length) {
                    self.options.onStringTyped(self.arrayPos);
                    if (self.arrayPos === self.strings.length - 1) {
                        self.options.callback();
                        self.curLoop++;
                        if (self.loop === false || self.curLoop === self.loopCount) return;
                    }
                    self.timeout = setTimeout(function() {
                        self.backspace(str, pos);
                    }, self.backDelay);
                } else {
                    0 === pos && self.options.preStringTyped(self.arrayPos);
                    var nextString = str.substr(0, pos + 1);
                    if (self.attr) {
                        self.el.attr(self.attr, nextString);
                    } else if (self.isInput) {
                        self.el.val(nextString);
                    } else if (self.contentType === 'html') {
                        self.el.html(nextString);
                    } else {
                        self.el.text(nextString);
                    }
                    pos++;
                    self.typewrite(str, pos);
                }
            }, humanize);
        },

        backspace: function(str, pos) {
            var self = this;
            if (self.stop === true) return;
            var humanize = Math.round(Math.random() * (100 - 30)) + self.backSpeed;
            setTimeout(function() {
                if ('html' === self.contentType && '>' === str.substr(pos).charAt(0)) {
                    var next = 1;
                    while ('<' !== str.substr(pos - next).charAt(0)) {
                        next++;
                    }
                    next++;
                }
                var nextString = str.substr(0, pos);
                if (self.attr) {
                    self.el.attr(self.attr, nextString);
                } else if (self.isInput) {
                    self.el.val(nextString);
                } else if (self.contentType === 'html') {
                    self.el.html(nextString);
                } else {
                    self.el.text(nextString);
                }
                if (pos > self.stopNum) {
                    pos--;
                    self.backspace(str, pos);
                } else if (pos <= self.stopNum) {
                    self.arrayPos++;
                    if (self.arrayPos === self.strings.length) {
                        self.arrayPos = 0;
                        if (self.loop === false) return;
                    }
                    self.typewrite(self.strings[self.arrayPos], pos);
                }
            }, humanize);
        },

        reset: function() {
            var self = this;
            clearInterval(self.timeout);
            var id = self.el.attr('id');
            self.el.after('<span id="' + id + '"/>');
            self.el.remove();
            if (typeof self.cursor !== 'undefined') {
                self.cursor.remove();
            }
            self.options.resetCallback();
        }
    };

    $.fn.typed = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data('typed');
            var options = typeof option === 'object' && option;
            if (!data) $this.data('typed', (data = new Typed(this, options)));
            if (typeof option === 'string') data[option]();
        });
    };

    $.fn.typed.defaults = {
        strings: ["These are the default values...", "You know what you should do?", "Use your own!", "Have a great day!"],
        typeSpeed: 0,
        startDelay: 0,
        backSpeed: 0,
        backDelay: 500,
        loop: false,
        loopCount: false,
        showCursor: true,
        cursorChar: "|",
        attr: null,
        contentType: "html",
        callback: function() {},
        preStringTyped: function() {},
        onStringTyped: function() {},
        resetCallback: function() {}
    };

})(window.jQuery);
